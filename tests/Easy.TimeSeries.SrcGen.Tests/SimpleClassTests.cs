namespace Easy.TimeSeries.SrcGen.Tests;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

public class SimpleClassTests
{
    [Fact]
    public void GenerateReader()
    {
        var compilation = CreateCompilation();
        var generator = new SrcGen.SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var result = driver.RunGenerators(compilation).GetRunResult();

        var gSyntaxTree = result.GeneratedTrees.SingleOrDefault(t => t.FilePath.EndsWith("PowerPlantReader.g.cs"));
        Assert.NotNull(gSyntaxTree);

        var gStr = gSyntaxTree.GetText().ToString();
        Assert.Equal(ExpectedReader, gStr, ignoreLineEndingDifferences: true);
    }

    [Fact]
    public void GenerateWriter()
    {
        var compilation = CreateCompilation();
        var generator = new SrcGen.SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var result = driver.RunGenerators(compilation).GetRunResult();

        var gSyntaxTree = result.GeneratedTrees.SingleOrDefault(t => t.FilePath.EndsWith("PowerPlantWriter.g.cs"));
        Assert.NotNull(gSyntaxTree);

        var gStr = gSyntaxTree.GetText().ToString();
        Assert.Equal(ExpectedWriter, gStr, ignoreLineEndingDifferences: true);
    }

    private static CSharpCompilation CreateCompilation()
    {
        const string assemblyName = nameof(SimpleClassTests);
        var syntaxTrees = new[] { CSharpSyntaxTree.ParseText(SimpleClass) };
        var references = new[]
        {
            // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
            //MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
            MetadataReference.CreateFromFile(typeof(Abstractions.GenerateWriterAttribute).Assembly.Location)
        };
        return CSharpCompilation.Create(assemblyName, syntaxTrees, references);
    }

    private const string SimpleClass =
"""

namespace SourceGenerationTests;

using Easy.TimeSeries.Abstractions;

[GenerateReader]
[GenerateWriter]
public sealed class PowerPlant
{
   public PowerPlant()
   {
   }

   public PowerPlant(string countryCode, float capacityMw)
   {
       CountryCode = countryCode;
       CapacityMw = capacityMw;
   }

   [Column(Label = "Country")]
   public string CountryCode { get; set; } = string.Empty;

   [Column(Label = "Capacity (MW)", NumberPrecision = NumberPrecision.DecimalPlaces2)]
   public float CapacityMw { get; set; }
}
""";

    private const string ExpectedReader =
"""
// <auto-generated/>

using System;
using System.Collections.Generic;

namespace TestNamespace;

partial class Vector3
{
    public IEnumerable<string> Report()
    {
        yield return $"X:{this.X}";
        yield return $"Y:{this.Y}";
        yield return $"Z:{this.Z}";
    }
}

""";

    private const string ExpectedWriter =
"""
// <auto-generated/>

using System;
using System.Collections.Generic;

namespace TestNamespace;

partial class Vector3
{
    public IEnumerable<string> Report()
    {
        yield return $"X:{this.X}";
        yield return $"Y:{this.Y}";
        yield return $"Z:{this.Z}";
    }
}

""";
}
